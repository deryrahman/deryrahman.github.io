<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on Dery R Ahaddienata</title><link>https://dery.dev/tags/tech/</link><description>Recent content in tech on Dery R Ahaddienata</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 30 Apr 2023 19:44:09 +0700</lastBuildDate><atom:link href="https://dery.dev/tags/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Thinking in Moderation</title><link>https://dery.dev/posts/thinking-in-moderation/</link><pubDate>Sun, 30 Apr 2023 19:44:09 +0700</pubDate><guid>https://dery.dev/posts/thinking-in-moderation/</guid><description>You will die if you don’t eat, and you will die either if you eat excessively. In the Nicomachean Ethics, Aristotle describes that eating too much or too little has a bad consequences to our body. Hence, the correlation between eating and health is not linear.
In economics, no tax makes government has no revenue, no infrastructure, public health, education, and security. On the other side, charged 100% tax makes individual has no money, and there’s no reason to work, then economy collapse and government has no revenue.</description><content>&lt;p>You will die if you don’t eat, and you will die either if you eat excessively. In the Nicomachean Ethics, Aristotle describes that eating too much or too little has a bad consequences to our body. Hence, the correlation between eating and health is not linear.&lt;/p>
&lt;p>In economics, no tax makes government has no revenue, no infrastructure, public health, education, and security. On the other side, charged 100% tax makes individual has no money, and there’s no reason to work, then economy collapse and government has no revenue. It’s clear that the government’s revenue and taxation is not linear either.&lt;/p>
&lt;img src="https://dery.dev/static/img/non-linear.png" alt="Linear vs Laffer Curve" class="center" style="border-radius: 5px;" />
&lt;p>In finance management, too much saving habit for retirement makes latter regret of not spent your youthful spending money for your own good. But excessively spending money makes you regret as well for not having retirement saving. Correlation between regretlessness and saving for retirement is not linear.&lt;/p>
&lt;p>In software development, there’s always tradeoff, there’s always an opportunity cost on choosing between one approach besides another. Which one is better, build a bugs free solution but late delivery. Or build a simple, one day delivery but bugs are everywhere. The relation between the quality of being professional and the time taken to develop software with less bugs is also not linear.&lt;/p>
&lt;p>It&amp;rsquo;s always naive to have a linear mindset. The world is not made in binary characteristic, linear correlation. There’s a lot example of it, I just only mention few. If there&amp;rsquo;s an optimal way, it must be somewhere in between. And it applies on every aspects.&lt;/p>
&lt;blockquote>
&lt;p>Thinking in moderation means thinking in a way that nothing can be called as an optimal unless we believe that the extreme must not the answer of the optimal solution.&lt;/p>
&lt;/blockquote></content></item><item><title>Balancing High Level Low Level Thinking</title><link>https://dery.dev/posts/balancing-high-level-low-level-thinking/</link><pubDate>Sun, 16 Jan 2022 19:08:09 +0700</pubDate><guid>https://dery.dev/posts/balancing-high-level-low-level-thinking/</guid><description>We can&amp;rsquo;t maintain fast thinking and precise thinking at the same time. There&amp;rsquo;s a tradeoff. Let me explain, when you read a sentence, you can grasp the meaning of that sentence. But, you don&amp;rsquo;t really care about the meaning of each word, or in more precise manner, you don&amp;rsquo;t even read each alphabet. How many alphabet m you&amp;rsquo;ve read up until this point? You don&amp;rsquo;t really care right? Because, our brain has tendency to automate common repeatable things (in this case, the individual word meaning or the alphabet) and only focus on the things that we think it matters (in this case, the meaning of whole sentence).</description><content>&lt;p>We can&amp;rsquo;t maintain fast thinking and precise thinking at the same time. There&amp;rsquo;s a tradeoff. Let me explain, when you read a sentence, you can grasp the meaning of that sentence. But, you don&amp;rsquo;t really care about the meaning of each word, or in more precise manner, you don&amp;rsquo;t even read each alphabet. How many alphabet &lt;code>m&lt;/code> you&amp;rsquo;ve read up until this point? You don&amp;rsquo;t really care right? Because, our brain has tendency to automate common repeatable things (in this case, the individual word meaning or the alphabet) and only focus on the things that we think it matters (in this case, the meaning of whole sentence).&lt;/p>
&lt;img src="https://dery.dev/static/img/highlevel-lowlevel.png" alt="High Level &amp;amp; low level in language hierarchy" class="center" style="border-radius: 5px;" />
&lt;p>Understanding individual word meaning can be seen as a low level, and understanding the whole sentence meaning can be seen as a high level. If we only focus on each individual word meaning, our reading ability will slower than if we focus on whole sentence as it is. But you can&amp;rsquo;t know the meaning of the sentence if you&amp;rsquo;ve never understood the individual word itself. You need to be more precise when you learn something new.&lt;/p>
&lt;p>Are you able to understand this sentence? 月曜日の朝. If you&amp;rsquo;re not familiar with the Japanese language, you need to learn the alphabet (hiragana, katakana, kanji), and learn the meaning of the word, and then the sentence as a whole. Let me rephrase this into more generalize concept. If we only focus on lower level task, we trade the ability to know detailed things over the speed. But if we focus on high level task before lower level, our understanding of high level is blurred. We need a balance of it. And as a software engineer, it really matters.&lt;/p>
&lt;blockquote>
&lt;p>If we only focus on lower level task, we trade the ability to know detailed things over the speed. But if we focus on high level task before lower level, our understanding of high level is blurred. We need a balance of it.&lt;/p>
&lt;/blockquote>
&lt;h2 id="why-is-it-important">Why is it important&lt;/h2>
&lt;p>Short answer, it&amp;rsquo;s not. But if you care about the efficiency of your time, it&amp;rsquo;s important. It will reduce the unecessary thinking if you see the things in higher level. And it will improve your ability to understand the things under the hood if you see the things in lower level. We know the abstraction. Each level has abstraction of its lower level. We don&amp;rsquo;t care about how the electricity give the chip gate circuit on and off (low level) while we write a program (high level) (unless you&amp;rsquo;re assembly engineer 😄). But knowing how memory works (low level) while we write a program (high level), can be reduce the catastrophic disaster that can be possibly happen in certain point of time.&lt;/p>
&lt;h2 id="how-we-define-the-high-level-and-low-level">How we define the high level and low level&lt;/h2>
&lt;p>It depends. But rule of thumb is you need to know just enough the low level that you think it matters, and think in high level to boost you speed. If you&amp;rsquo;re a backend engineer, the low level you need to know is how OS works, and the high level thing is the code itself. If you&amp;rsquo;re an assembly engineer, maybe backend&amp;rsquo;s low level can be seen as their high level and how the chip works can be seen as their low level thing.&lt;/p>
&lt;blockquote>
&lt;p>Just enough to know the low level concept, but think in high level abstraction.&lt;/p>
&lt;/blockquote>
&lt;img src="https://dery.dev/static/img/highlevel-lowlevel-softeng.png" alt="High Level &amp;amp; low level in software engineer" class="center" style="border-radius: 5px;" />
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>We need a right balance between thinking in high level and low level. Sometimes, we need to slowdown the process if we need to understand the detail in deep, sometimes we need to focus only on high level without even care about the lower level (it just happens unconciously). By balancing both dynamically in a certain short of condition, we are able to utilize the advantages from both combination.&lt;/p>
&lt;blockquote>
&lt;p>No amount of genius can overcome a preoccupation with detail. - Levy’s Eighth Law&lt;/p>
&lt;/blockquote></content></item><item><title>July Vim Setup</title><link>https://dery.dev/posts/july-vim-setup/</link><pubDate>Tue, 20 Jul 2021 12:02:09 +0700</pubDate><guid>https://dery.dev/posts/july-vim-setup/</guid><description>I&amp;rsquo;ve been using vim as my default IDE for about a year. Until now I&amp;rsquo;m still improving the vim configuration so that I could do the task even more effective. Now after nvim launch version 0.5.0 which support native LSP client, I immediately tried this feature. Yeps, there&amp;rsquo;re no significant difference when I use LanguageClient-neovim, but since version 0.5.0 has built in feature for LSP client, I would preferably use the built in one.</description><content>&lt;p>I&amp;rsquo;ve been using &lt;a href="https://levelup.gitconnected.com/tweak-your-vim-as-a-powerful-ide-fcea5f7eff9c">vim as my default IDE&lt;/a> for about a year. Until now I&amp;rsquo;m still improving the vim configuration so that I could do the task even more effective. Now after &lt;a href="https://neovim.io/roadmap/">nvim launch version 0.5.0&lt;/a> which support native LSP client, I immediately tried this feature. Yeps, there&amp;rsquo;re no significant difference when I use &lt;a href="https://github.com/autozimu/LanguageClient-neovim">LanguageClient-neovim&lt;/a>, but since version 0.5.0 has built in feature for LSP client, I would preferably use the built in one.&lt;/p>
&lt;p>If we compare with &lt;a href="https://levelup.gitconnected.com/tweak-your-vim-as-a-powerful-ide-fcea5f7eff9c">my last setup&lt;/a>, we can see significant config differences. And because I also planned to try contribute on &lt;a href="https://github.com/ChristianChiarulli/LunarVim">LunarVim project&lt;/a>, I would like to documenting all of the setup I used now.&lt;/p>
&lt;p>&lt;a href="https://asciinema.org/a/426314">&lt;img src="https://asciinema.org/a/426314.svg" alt="asciicast">&lt;/a>&lt;/p>
&lt;h2 id="plugins">Plugins&lt;/h2>
&lt;h3 id="autocomplete-definition-etc-related-plugin">Autocomplete, Definition, etc Related Plugin&lt;/h3>
&lt;ol>
&lt;li>neovim/nvim-lspconfig&lt;/li>
&lt;li>hrsh7th/nvim-compe&lt;/li>
&lt;li>ojroques/nvim-lspfuzzy&lt;/li>
&lt;/ol>
&lt;h3 id="syntax-linter-etc-related-plugin">Syntax, Linter, etc Related Plugin&lt;/h3>
&lt;ol>
&lt;li>nvim-treesitter/nvim-treesitter&lt;/li>
&lt;li>dense-analysis/ale&lt;/li>
&lt;/ol>
&lt;h3 id="theme--layouting-related-plugin">Theme &amp;amp; Layouting Related Plugin&lt;/h3>
&lt;ol>
&lt;li>junegunn/fzf.vim&lt;/li>
&lt;li>szw/vim-maximizer&lt;/li>
&lt;li>preservim/nerdtree&lt;/li>
&lt;li>Xuyuanp/nerdtree-git-plugin&lt;/li>
&lt;li>morhetz/gruvbox&lt;/li>
&lt;li>vim-airline/vim-airline&lt;/li>
&lt;li>vim-airline/vim-airline-themes&lt;/li>
&lt;li>airblade/vim-gitgutter&lt;/li>
&lt;li>yuttie/comfortable-motion.vim&lt;/li>
&lt;/ol>
&lt;h3 id="debbuger">Debbuger&lt;/h3>
&lt;ol>
&lt;li>puremourning/vimspector&lt;/li>
&lt;/ol>
&lt;h3 id="misc">Misc&lt;/h3>
&lt;ol>
&lt;li>vimwiki/vimwiki&lt;/li>
&lt;/ol>
&lt;h2 id="dot-files">Dot Files&lt;/h2>
&lt;h3 id="plugin-config">Plugin Config&lt;/h3>
&lt;div class="collapsable-code">
&lt;input id="987534162" type="checkbox" checked />
&lt;label for="987534162">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vimrc&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
set nocompatible
filetype plugin on
syntax on
set modeline
set expandtab
set tabstop=4
set shiftwidth=4
set exrc &amp;#34; .vimrc in local project dir
set secure
autocmd BufRead,BufNewFile * set signcolumn=yes
autocmd FileType tagbar,nerdtree set signcolumn=no
set foldmethod=syntax
set nofoldenable
set number
set belloff=&amp;#34;&amp;#34;
set lazyredraw
set ttyfast
set spell spelllang=en_us
au CursorHold,CursorHoldI * checktime
if (has(&amp;#39;nvim&amp;#39;))
set diffopt&amp;#43;=vertical
&amp;#34;-- VIM-PLUG --
call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;)
Plug &amp;#39;neovim/nvim-lspconfig&amp;#39;
Plug &amp;#39;hrsh7th/nvim-compe&amp;#39;
Plug &amp;#39;ojroques/nvim-lspfuzzy&amp;#39;
Plug &amp;#39;nvim-treesitter/nvim-treesitter&amp;#39;, {&amp;#39;do&amp;#39;: &amp;#39;:TSUpdate&amp;#39;}
Plug &amp;#39;puremourning/vimspector&amp;#39;
Plug &amp;#39;szw/vim-maximizer&amp;#39;
Plug &amp;#39;preservim/nerdtree&amp;#39;
Plug &amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39;
Plug &amp;#39;sonph/onehalf&amp;#39;, {&amp;#39;rtp&amp;#39;: &amp;#39;vim/&amp;#39;}
Plug &amp;#39;morhetz/gruvbox&amp;#39;
Plug &amp;#39;vim-airline/vim-airline&amp;#39;
Plug &amp;#39;vim-airline/vim-airline-themes&amp;#39;
Plug &amp;#39;airblade/vim-gitgutter&amp;#39;
Plug &amp;#39;dense-analysis/ale&amp;#39;
Plug &amp;#39;junegunn/fzf.vim&amp;#39;
Plug &amp;#39;/usr/local/opt/fzf&amp;#39;
Plug &amp;#39;yuttie/comfortable-motion.vim&amp;#39;
Plug &amp;#39;vimwiki/vimwiki&amp;#39;
call plug#end()
&amp;#34;-- PLUGIN CONFIGS --
source ~/.vim/config/theme.vim
source ~/.vim/config/fzf.vim
source ~/.vim/config/treesitter.vim
source ~/.vim/config/vimwiki.vim
luafile ~/.vim/config/compe.lua
luafile ~/.vim/config/lspfuzzy.lua
source ~/.vim/config/lsp_config.vim
source ~/.vim/config/ale.vim
source ~/.vim/config/vimspector.vim
source ~/.vim/config/maximizer.vim
&amp;#34;-- EXTERNAL CONFIGS --
source ~/.vim/config/autoclose.vim
source ~/.vim/config/custom_map.vim
source ~/.vim/config/session.vim
endif
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="291753684" type="checkbox" checked />
&lt;label for="291753684">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/theme.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
if (has(&amp;#34;termguicolors&amp;#34;) &amp;amp;&amp;amp; $TERM_PROGRAM ==# &amp;#39;iTerm.app&amp;#39;)
set termguicolors
endif
set cursorline
set background=dark
autocmd vimenter * &amp;#43;&amp;#43;nested colorscheme gruvbox
hi Error ctermfg=204 ctermbg=NONE guifg=#ff5f87 guibg=NONE
hi Warning ctermfg=178 ctermbg=NONE guifg=#D7AF00 guibg=NONE
hi Folded ctermfg=grey guifg=grey ctermbg=NONE guibg=NONE
hi Normal ctermbg=NONE guibg=NONE
hi SignColumn ctermbg=235 guibg=#262626
hi LineNr ctermfg=grey guifg=grey ctermbg=NONE guibg=NONE
hi CursorLineNr ctermbg=NONE guibg=NONE ctermfg=178 guifg=#d7af00
hi LspDiagnosticsDefaultError ctermfg=204 ctermbg=NONE guifg=#ff5f87 guibg=NONE
hi LspDiagnosticsDefaultWarning ctermfg=178 ctermbg=NONE guifg=#D7AF00 guibg=NONE
let g:gitgutter_set_sign_backgrounds = 0
&amp;#34;-- Whitespace highlight --
hi ExtraWhitespace ctermbg=204 guibg=#ff5f87
match ExtraWhitespace /\s\&amp;#43;$/
autocmd BufWinEnter * match ExtraWhitespace /\s\&amp;#43;$/
autocmd InsertEnter * match ExtraWhitespace /\s\&amp;#43;\%#\@&amp;lt;!$/
autocmd InsertLeave * match ExtraWhitespace /\s\&amp;#43;$/
autocmd BufWinLeave * call clearmatches()
&amp;#34;-- Vimwiki color --
&amp;#34;-- this using palenight color scheme --
hi VimwikiHeader1 ctermbg=NONE guibg=NONE ctermfg=180 guifg=#ffcb6b
hi VimwikiHeader2 ctermbg=NONE guibg=NONE ctermfg=39 guifg=#82b1ff
hi VimwikiHeader3 ctermbg=NONE guibg=NONE ctermfg=38 guifg=#89ddff
hi VimwikiHeader4 ctermbg=NONE guibg=NONE ctermfg=38 guifg=#89ddff
hi VimwikiHeader5 ctermbg=NONE guibg=NONE ctermfg=38 guifg=#89ddff
hi VimwikiHeader6 ctermbg=NONE guibg=NONE ctermfg=38 guifg=#89ddff
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#fugutive#enabled = 1
let g:airline#extensions#coc#enabled = 1
let NERDTreeShowHidden = 1
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="921576483" type="checkbox" checked />
&lt;label for="921576483">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/fzf.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
set rtp&amp;#43;=/usr/local/opt/fzf
source /usr/local/opt/fzf/plugin/fzf.vim
let g:fzf_tags_command = &amp;#39;ctags -R&amp;#39;
let g:fzf_layout = {&amp;#39;up&amp;#39;:&amp;#39;~90%&amp;#39;, &amp;#39;window&amp;#39;: { &amp;#39;width&amp;#39;: 0.8, &amp;#39;height&amp;#39;: 0.8,&amp;#39;yoffset&amp;#39;:0.5,&amp;#39;xoffset&amp;#39;: 0.5, &amp;#39;highlight&amp;#39;: &amp;#39;Todo&amp;#39;, &amp;#39;border&amp;#39;: &amp;#39;sharp&amp;#39; } }
let $FZF_DEFAULT_OPTS = &amp;#39;--layout=reverse --info=inline&amp;#39;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="752481936" type="checkbox" checked />
&lt;label for="752481936">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/treesitter.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
lua &amp;lt;&amp;lt;EOF
require&amp;#39;nvim-treesitter.configs&amp;#39;.setup {
ensure_installed = &amp;#34;maintained&amp;#34;, -- one of &amp;#34;all&amp;#34;, &amp;#34;maintained&amp;#34; (parsers with maintainers), or a list of languages
ignore_install = {}, -- List of parsers to ignore installing
highlight = {
enable = true, -- false will disable the whole extension
disable = {}, -- list of language that will be disabled
-- Setting this to true will run `:h syntax` and tree-sitter at the same time.
-- Set this to `true` if you depend on &amp;#39;syntax&amp;#39; being enabled (like for indentation).
-- Using this option may slow down your editor, and you may see some duplicate highlights.
-- Instead of true it can also be a list of languages
additional_vim_regex_highlighting = false,
},
}
EOF
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="986457312" type="checkbox" checked />
&lt;label for="986457312">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/vimwiki.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
let g:vimwiki_folding = &amp;#39;custom&amp;#39;
:hi VimwikiHeader1 guifg=#FF0000
:hi VimwikiHeader2 guifg=#00FF00
:hi VimwikiHeader3 guifg=#0000FF
:hi VimwikiHeader4 guifg=#FF00FF
:hi VimwikiHeader5 guifg=#00FFFF
:hi VimwikiHeader6 guifg=#FFFF00
let g:vimwiki_global_ext = 0
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="296814357" type="checkbox" checked />
&lt;label for="296814357">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/lsp_config.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
&amp;#34; LSP config (the mappings used in the default file don&amp;#39;t quite work right)
nnoremap &amp;lt;silent&amp;gt; gd &amp;lt;cmd&amp;gt;lua vim.lsp.buf.definition()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; gD &amp;lt;cmd&amp;gt;lua vim.lsp.buf.declaration()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; gr &amp;lt;cmd&amp;gt;lua vim.lsp.buf.references()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; gi &amp;lt;cmd&amp;gt;lua vim.lsp.buf.implementation()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; K &amp;lt;cmd&amp;gt;lua vim.lsp.buf.hover()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-k&amp;gt; &amp;lt;cmd&amp;gt;lua vim.lsp.buf.signature_help()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-p&amp;gt; &amp;lt;cmd&amp;gt;lua vim.lsp.diagnostic.goto_prev()&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-n&amp;gt; &amp;lt;cmd&amp;gt;lua vim.lsp.diagnostic.goto_next()&amp;lt;CR&amp;gt;
&amp;#34; LSP config for specific language
luafile ~/.vim/config/lsp/go.lua
luafile ~/.vim/config/lsp/js.lua
luafile ~/.vim/config/lsp/json.lua
&amp;#34; auto-format
autocmd BufWritePre *.js lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.jsx lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.ts lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.tsx lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.py lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.go lua vim.lsp.buf.formatting_sync(nil, 100)
autocmd BufWritePre *.json lua vim.lsp.buf.formatting_sync(nil, 100)
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="627458319" type="checkbox" checked />
&lt;label for="627458319">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/ale.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
hi clear ALEErrorSign
hi clear ALEWarningSign
let g:ale_echo_msg_format = &amp;#39;[%linter%] %s [%severity%]&amp;#39;
let g:ale_sign_warning = &amp;#39;○&amp;#39;
let g:ale_sign_error = &amp;#39;◉&amp;#39;
hi ALEError ctermfg=204 guifg=#ff5f87 ctermbg=52 guibg=#5f0000 cterm=undercurl gui=undercurl
hi link ALEErrorSign Error
hi link ALEWarningSign Warning
let g:ale_linters = {
\ &amp;#39;python&amp;#39;: [&amp;#39;pylint&amp;#39;],
\ &amp;#39;javascript&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;typescript&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;json&amp;#39;: [&amp;#39;fixjson&amp;#39;],
\ &amp;#39;vue&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;go&amp;#39;: [&amp;#39;gobuild&amp;#39;, &amp;#39;golint&amp;#39;, &amp;#39;gofmt&amp;#39;],
\ &amp;#39;rust&amp;#39;: [&amp;#39;rls&amp;#39;],
\ &amp;#39;ruby&amp;#39;: [&amp;#39;rubocop&amp;#39;]
\}
let g:ale_fixers = {
\ &amp;#39;*&amp;#39;: [&amp;#39;remove_trailing_lines&amp;#39;, &amp;#39;trim_whitespace&amp;#39;],
\ &amp;#39;python&amp;#39;: [&amp;#39;autopep8&amp;#39;],
\ &amp;#39;javascript&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;typescript&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;json&amp;#39;: [&amp;#39;fixjson&amp;#39;],
\ &amp;#39;vue&amp;#39;: [&amp;#39;eslint&amp;#39;],
\ &amp;#39;go&amp;#39;: [&amp;#39;gofmt&amp;#39;, &amp;#39;goimports&amp;#39;],
\ &amp;#39;rust&amp;#39;: [&amp;#39;rustfmt&amp;#39;],
\ &amp;#39;ruby&amp;#39;: [&amp;#39;rubocop&amp;#39;]
\}
let g:ale_fix_on_save = 1
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="583241796" type="checkbox" checked />
&lt;label for="583241796">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/vimspector.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
let g:vimspector_enable_mappings=&amp;#39;HUMAN&amp;#39;
nmap &amp;lt;leader&amp;gt;dd &amp;lt;Plug&amp;gt;VimspectorContinue
nmap &amp;lt;leader&amp;gt;dc :call vimspector#ClearBreakpoints()&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;dq :VimspectorReset&amp;lt;CR&amp;gt;
nmap &amp;lt;leader&amp;gt;dr &amp;lt;Plug&amp;gt;VimspectorRestart
nmap &amp;lt;leader&amp;gt;db &amp;lt;Plug&amp;gt;VimspectorToggleBreakpoint
nmap &amp;lt;leader&amp;gt;dn &amp;lt;Plug&amp;gt;VimspectorStepOver
nmap &amp;lt;leader&amp;gt;di &amp;lt;Plug&amp;gt;VimspectorStepInto
nmap &amp;lt;leader&amp;gt;do &amp;lt;Plug&amp;gt;VimspectorStepOut
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="794185632" type="checkbox" checked />
&lt;label for="794185632">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/maximizer.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
map &amp;lt;C-W&amp;gt;z :MaximizerToggle&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="812975643" type="checkbox" checked />
&lt;label for="812975643">
&lt;span class="collapsable-code__language">lua&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/compe.lua&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-lua" >&lt;code>
vim.o.completeopt = &amp;#34;menuone,noselect&amp;#34;
require&amp;#39;compe&amp;#39;.setup {
enabled = true;
autocomplete = true;
debug = false;
min_length = 1;
preselect = &amp;#39;enable&amp;#39;;
throttle_time = 80;
source_timeout = 200;
incomplete_delay = 400;
max_abbr_width = 100;
max_kind_width = 100;
max_menu_width = 100;
documentation = false;
source = {
path = true;
buffer = true;
calc = true;
vsnip = true;
nvim_lsp = true;
nvim_lua = true;
spell = true;
tags = true;
snippets_nvim = true;
};
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="946532871" type="checkbox" checked />
&lt;label for="946532871">
&lt;span class="collapsable-code__language">lua&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/lspfuzzy.lua&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-lua" >&lt;code>
require(&amp;#39;lspfuzzy&amp;#39;).setup {
methods = {&amp;#39;textDocument/implementation&amp;#39;,&amp;#39;textDocument/references&amp;#39;}, -- either &amp;#39;all&amp;#39; or a list of LSP methods (see below)
fzf_preview = { -- arguments to the FZF &amp;#39;--preview-window&amp;#39; option
&amp;#39;right:&amp;#43;{2}-/2&amp;#39; -- preview on the right and centered on entry
},
fzf_action = { -- FZF actions
[&amp;#39;ctrl-t&amp;#39;] = &amp;#39;tabedit&amp;#39;, -- go to location in a new tab
[&amp;#39;ctrl-v&amp;#39;] = &amp;#39;vsplit&amp;#39;, -- go to location in a vertical split
[&amp;#39;ctrl-x&amp;#39;] = &amp;#39;split&amp;#39;, -- go to location in a horizontal split
},
fzf_modifier = &amp;#39;:~:.&amp;#39;, -- format FZF entries, see |filename-modifiers|
fzf_trim = true, -- trim FZF entries
}
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="external-config">External Config&lt;/h3>
&lt;div class="collapsable-code">
&lt;input id="864172539" type="checkbox" checked />
&lt;label for="864172539">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/autoclose.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
&amp;#34;-- AUTOCLOSE --
&amp;#34;disable autoclose
inoremap &amp;lt;C-W&amp;gt;&amp;#39; &amp;#39;
inoremap &amp;lt;C-W&amp;gt;` `
inoremap &amp;lt;C-W&amp;gt;&amp;#34; &amp;#34;
inoremap &amp;lt;C-W&amp;gt;( (
inoremap &amp;lt;C-W&amp;gt;[ [
inoremap &amp;lt;C-W&amp;gt;{ {
&amp;#34;autoclose and position cursor to write text inside
inoremap &amp;#39; &amp;#39;&amp;#39;&amp;lt;left&amp;gt;
inoremap ` ``&amp;lt;left&amp;gt;
inoremap &amp;#34; &amp;#34;&amp;#34;&amp;lt;left&amp;gt;
inoremap ( ()&amp;lt;left&amp;gt;
inoremap [ []&amp;lt;left&amp;gt;
inoremap { {}&amp;lt;left&amp;gt;
&amp;#34;autoclose with ; and position cursor to write text inside
inoremap &amp;#39;; &amp;#39;&amp;#39;;&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap `; ``;&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap &amp;#34;; &amp;#34;&amp;#34;;&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap (; ();&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap [; [];&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap {; {};&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
&amp;#34;autoclose with , and position cursor to write text inside
inoremap &amp;#39;, &amp;#39;&amp;#39;,&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap `, ``,&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap &amp;#34;, &amp;#34;&amp;#34;,&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap (, (),&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap [, [],&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
inoremap {, {},&amp;lt;left&amp;gt;&amp;lt;left&amp;gt;
&amp;#34;autoclose and position cursor after
inoremap &amp;#39;&amp;lt;tab&amp;gt; &amp;#39;&amp;#39;
inoremap `&amp;lt;tab&amp;gt; ``
inoremap &amp;#34;&amp;lt;tab&amp;gt; &amp;#34;&amp;#34;
inoremap (&amp;lt;tab&amp;gt; ()
inoremap [&amp;lt;tab&amp;gt; []
inoremap {&amp;lt;tab&amp;gt; {}
&amp;#34;autoclose with ; and position cursor after
inoremap &amp;#39;;&amp;lt;tab&amp;gt; &amp;#39;&amp;#39;;
inoremap `;&amp;lt;tab&amp;gt; ``;
inoremap &amp;#34;;&amp;lt;tab&amp;gt; &amp;#34;&amp;#34;;
inoremap (;&amp;lt;tab&amp;gt; ();
inoremap [;&amp;lt;tab&amp;gt; [];
inoremap {;&amp;lt;tab&amp;gt; {};
&amp;#34;autoclose with , and position cursor after
inoremap &amp;#39;,&amp;lt;tab&amp;gt; &amp;#39;&amp;#39;,
inoremap `,&amp;lt;tab&amp;gt; ``,
inoremap &amp;#34;,&amp;lt;tab&amp;gt; &amp;#34;&amp;#34;,
inoremap (,&amp;lt;tab&amp;gt; (),
inoremap [,&amp;lt;tab&amp;gt; [],
inoremap {,&amp;lt;tab&amp;gt; {},
&amp;#34;autoclose 2 lines below and position cursor in the middle
inoremap &amp;#39;&amp;lt;CR&amp;gt; &amp;#39;&amp;lt;CR&amp;gt;&amp;#39;&amp;lt;ESC&amp;gt;O
inoremap `&amp;lt;CR&amp;gt; `&amp;lt;CR&amp;gt;`&amp;lt;ESC&amp;gt;O
inoremap &amp;#34;&amp;lt;CR&amp;gt; &amp;#34;&amp;lt;CR&amp;gt;&amp;#34;&amp;lt;ESC&amp;gt;O
inoremap (&amp;lt;CR&amp;gt; (&amp;lt;CR&amp;gt;)&amp;lt;ESC&amp;gt;O
inoremap [&amp;lt;CR&amp;gt; [&amp;lt;CR&amp;gt;]&amp;lt;ESC&amp;gt;O
inoremap {&amp;lt;CR&amp;gt; {&amp;lt;CR&amp;gt;}&amp;lt;ESC&amp;gt;O
&amp;#34;autoclose 2 lines below adding ; and position cursor in the middle
inoremap &amp;#39;;&amp;lt;CR&amp;gt; &amp;#39;&amp;lt;CR&amp;gt;&amp;#39;;&amp;lt;ESC&amp;gt;O
inoremap `;&amp;lt;CR&amp;gt; `&amp;lt;CR&amp;gt;`;&amp;lt;ESC&amp;gt;O
inoremap &amp;#34;;&amp;lt;CR&amp;gt; &amp;#34;&amp;lt;CR&amp;gt;&amp;#34;;&amp;lt;ESC&amp;gt;O
inoremap (;&amp;lt;CR&amp;gt; (&amp;lt;CR&amp;gt;);&amp;lt;ESC&amp;gt;O
inoremap [;&amp;lt;CR&amp;gt; [&amp;lt;CR&amp;gt;];&amp;lt;ESC&amp;gt;O
inoremap {;&amp;lt;CR&amp;gt; {&amp;lt;CR&amp;gt;};&amp;lt;ESC&amp;gt;O
&amp;#34;autoclose 2 lines below adding , and position cursor in the middle
inoremap &amp;#39;,&amp;lt;CR&amp;gt; &amp;#39;&amp;lt;CR&amp;gt;&amp;#39;,&amp;lt;ESC&amp;gt;O
inoremap `,&amp;lt;CR&amp;gt; `&amp;lt;CR&amp;gt;`,&amp;lt;ESC&amp;gt;O
inoremap &amp;#34;,&amp;lt;CR&amp;gt; &amp;#34;&amp;lt;CR&amp;gt;&amp;#34;,&amp;lt;ESC&amp;gt;O
inoremap (,&amp;lt;CR&amp;gt; (&amp;lt;CR&amp;gt;),&amp;lt;ESC&amp;gt;O
inoremap [,&amp;lt;CR&amp;gt; [&amp;lt;CR&amp;gt;],&amp;lt;ESC&amp;gt;O
inoremap {,&amp;lt;CR&amp;gt; {&amp;lt;CR&amp;gt;},&amp;lt;ESC&amp;gt;O
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="728649135" type="checkbox" checked />
&lt;label for="728649135">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/custom_map.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
map &amp;lt;leader&amp;gt;` :NERDTreeToggle&amp;lt;CR&amp;gt;
map &amp;lt;leader&amp;gt;~ :NERDTreeFind&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;tab&amp;gt; :if &amp;amp;modifiable &amp;amp;&amp;amp; !&amp;amp;readonly &amp;amp;&amp;amp; &amp;amp;modified &amp;lt;CR&amp;gt; :write&amp;lt;CR&amp;gt; :endif&amp;lt;CR&amp;gt;:bnext&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;s-tab&amp;gt; :if &amp;amp;modifiable &amp;amp;&amp;amp; !&amp;amp;readonly &amp;amp;&amp;amp; &amp;amp;modified &amp;lt;CR&amp;gt; :write&amp;lt;CR&amp;gt; :endif&amp;lt;CR&amp;gt;:bprevious&amp;lt;CR&amp;gt;
nnoremap &amp;lt;C-J&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-J&amp;gt;
nnoremap &amp;lt;C-K&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-K&amp;gt;
nnoremap &amp;lt;C-L&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-L&amp;gt;
nnoremap &amp;lt;C-H&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;C-H&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;Up&amp;gt; :exe &amp;#34;resize &amp;#34; . (winheight(0) * 3/2)&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;Down&amp;gt; :exe &amp;#34;resize &amp;#34; . (winheight(0) * 2/3)&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;Left&amp;gt; :exe &amp;#34;vert resize &amp;#34; . (winwidth(0) * 2/3)&amp;lt;CR&amp;gt;
nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-W&amp;gt;&amp;lt;Right&amp;gt; :exe &amp;#34;vert resize &amp;#34; . (winwidth(0) * 3/2)&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="collapsable-code">
&lt;input id="473518629" type="checkbox" checked />
&lt;label for="473518629">
&lt;span class="collapsable-code__language">vim&lt;/span>
&lt;span class="collapsable-code__title">~/.vim/config/session.vim&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-vim" >&lt;code>
function GetSessionFileName() abort
if len(argv()) &amp;gt; 0
return substitute(fnamemodify(argv()[0], &amp;#39;:p:h&amp;#39;), &amp;#34;/&amp;#34;, &amp;#34;_&amp;#34;, &amp;#34;g&amp;#34;)
endif
return substitute(fnamemodify(getcwd(), &amp;#39;:p:h&amp;#39;), &amp;#34;/&amp;#34;, &amp;#34;_&amp;#34;, &amp;#34;g&amp;#34;)
endfunction!
let g:session_path = join([&amp;#39;~/.vim/sessions/&amp;#39;, GetSessionFileName(), &amp;#39;.vim&amp;#39;], &amp;#39;&amp;#39;)
&amp;#34; Save session on quitting Vim
autocmd VimLeave * NERDTreeClose
autocmd VimLeave * execute &amp;#39;mksession!&amp;#39; g:session_path
&amp;#34; Restore session function
function RestoreSession() abort
execute &amp;#39;source&amp;#39; g:session_path
autocmd VimEnter * NERDTree
endfunction!
map &amp;lt;leader&amp;gt;r :call RestoreSession()&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h2 id="custom-shortcut-list">Custom Shortcut List&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Shortcut&lt;/th>
&lt;th>Action&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>\`&lt;/td>
&lt;td>Toggle NerdTree&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\~&lt;/td>
&lt;td>Toggle NerdTree focus on current file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\r&lt;/td>
&lt;td>Restore Sessions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\ww&lt;/td>
&lt;td>Open vimwiki&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\dd&lt;/td>
&lt;td>Open debug session / continue to next breakpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\db&lt;/td>
&lt;td>Toggle debug breakpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\dq&lt;/td>
&lt;td>Quit debug session&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\dc&lt;/td>
&lt;td>Clear all debug breakpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\dr&lt;/td>
&lt;td>Restart debug&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\dn&lt;/td>
&lt;td>Step over (next line)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\di&lt;/td>
&lt;td>Step into (function)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\do&lt;/td>
&lt;td>Step out (function)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>References&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://levelup.gitconnected.com/tweak-your-vim-as-a-powerful-ide-fcea5f7eff9c">https://levelup.gitconnected.com/tweak-your-vim-as-a-powerful-ide-fcea5f7eff9c&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://neovim.io/roadmap/">https://neovim.io/roadmap/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/autozimu/LanguageClient-neovim">https://github.com/autozimu/LanguageClient-neovim&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ChristianChiarulli/LunarVim">https://github.com/ChristianChiarulli/LunarVim&lt;/a>&lt;/li>
&lt;/ol></content></item><item><title>Software System Fundamentals</title><link>https://dery.dev/posts/software-system-fundamentals/</link><pubDate>Mon, 19 Jul 2021 15:49:33 +0700</pubDate><guid>https://dery.dev/posts/software-system-fundamentals/</guid><description>The book I&amp;rsquo;m currently reading is Designing Data Intensive Applications by Martin Kleppmann. During the first read, I found concise fundamentals we need to concern most when dealing with a high quality software system. There&amp;rsquo;re 3 fundamentals as follow:
Fundamental Definition Reliability The system should work properly even when the things go wrong (faulty) Scalability The system should be able to handle the growth (data volume, traffic, or complexity) Maintainability The system should easily adaptable enough during maintenance (bugs, failures, and new features) Reliability Faulty can come up from several places:</description><content>&lt;p>The book I&amp;rsquo;m currently reading is &lt;a href="https://learning.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/">Designing Data Intensive Applications&lt;/a> by Martin Kleppmann. During the first read, I found concise fundamentals we need to concern most when dealing with a high quality software system. There&amp;rsquo;re 3 fundamentals as follow:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Fundamental&lt;/th>
&lt;th>Definition&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Reliability&lt;/strong>&lt;/td>
&lt;td>The system should work properly even when the things go wrong (faulty)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Scalability&lt;/strong>&lt;/td>
&lt;td>The system should be able to handle the growth (data volume, traffic, or complexity)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Maintainability&lt;/strong>&lt;/td>
&lt;td>The system should easily adaptable enough during maintenance (bugs, failures, and new features)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="reliability">Reliability&lt;/h2>
&lt;p>Faulty can come up from several places:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Hardware Faults&lt;/strong>: eg. Hard disk has MTTF (mean time to failure) of about 10 to 50 years.&lt;/li>
&lt;li>&lt;strong>Software Faults&lt;/strong>: eg. Uncaught bugs in Linux kernel due to leap second on June 20, 2012.&lt;/li>
&lt;li>&lt;strong>Human Errors&lt;/strong>: eg. Configuration error by operators leads the most system outage.&lt;/li>
&lt;/ul>
&lt;h2 id="scalability">Scalability&lt;/h2>
&lt;p>Data growth is equal to increasing load. There&amp;rsquo;re 2 things need to describe:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Load&lt;/strong>: current load existing on the system. Some parameters:
&lt;ul>
&lt;li>request per second&lt;/li>
&lt;li>response time&lt;/li>
&lt;li>read write ration on DB&lt;/li>
&lt;li>number of concurrent user&lt;/li>
&lt;li>hit rate on cache&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Performance&lt;/strong>: metrics that used to define how good the system handle load. It can be used as SLA / SLO. Some metrics:
&lt;ul>
&lt;li>avg / mean&lt;/li>
&lt;li>median: p50&lt;/li>
&lt;li>percentile: p95, p99, p999&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="maintainability">Maintainability&lt;/h2>
&lt;p>The goal is to minimize pain during maintenance. Three design principles need to follow:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Operability&lt;/strong>: make it easy for teams to keep the system run smoothly.&lt;/li>
&lt;li>&lt;strong>Simplicity&lt;/strong>: make it easy for new engineer to understand the system.&lt;/li>
&lt;li>&lt;strong>Evolvability&lt;/strong>: make it easy for engineer to extend the system.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>References&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://learning.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/">Designing Data Intensive Applications&lt;/a> by Martin Kleppmann&lt;/li>
&lt;/ol></content></item><item><title>Redis Cluster Migration Strategy</title><link>https://dery.dev/posts/redis-cluster-migration-strategy/</link><pubDate>Sat, 17 Jul 2021 23:16:48 +0700</pubDate><guid>https://dery.dev/posts/redis-cluster-migration-strategy/</guid><description>Last week I have a chance to perform Redis cluster migration. Our Redis cluster contains 6 high memory VMs. At peak, it has 800 request/second. In this article I would like to explain how we migrate Redis cluster with zero downtime as well as lesson learned I&amp;rsquo;ve gathered.
Problem Statement As Ubuntu 16.04 no longer support LTS, we need to upgrade some obsolete VMs to latest version (20.04). One of the obsolete VMs are our Redis cluster.</description><content>&lt;p>Last week I have a chance to perform Redis cluster migration. Our Redis cluster contains 6 high memory VMs. At peak, it has 800 request/second. In this article I would like to explain how we migrate Redis cluster with zero downtime as well as lesson learned I&amp;rsquo;ve gathered.&lt;/p>
&lt;h2 id="problem-statement">Problem Statement&lt;/h2>
&lt;p>As Ubuntu 16.04 no longer support LTS, we need to upgrade some obsolete VMs to latest version (20.04). One of the obsolete VMs are our Redis cluster. Most of the services rely on our service that use this Redis cluster as in-memory storage. Upgrading the OS inside the node is not the option since it require complex reconfiguration as well as inevitable downtime.&lt;/p>
&lt;p>We&amp;rsquo;re using Redis version 5.0.9, with GCP VM n2-highmem-4. The cluster contains 3 master nodes and 3 slave nodes. The keys are stored in memory that filled up 16GB across 3 partitions.&lt;/p>
&lt;h2 id="goal">Goal&lt;/h2>
&lt;p>Upgrade the Ubuntu version (16.04) of all Redis cluster nodes to 20.14 with zero downtime.&lt;/p>
&lt;h2 id="approach">Approach&lt;/h2>
&lt;p>First we spin up new GCP VM with Ubuntu 20.04 installed. Then install and configure the Redis so that this new Redis are ready to join to the existing cluster. Then add this node to the cluster as a slave of partition 1. Wait for this slave to sync the data with the master. Repeat it for the partition 2 and 3. Then perform manual failover so the new node will be promoted as a new master. Finally, detach all the old Redis nodes from cluster. It seems like quite easy. Yes it does. But in practice, we have a challenge. The challenge will be explained in the &lt;a href="#lesson-learned">Lesson Learned&lt;/a> section.&lt;/p>
&lt;p>Put image here (TBD)&lt;/p>
&lt;p>Here&amp;rsquo;re some steps in details:&lt;/p>
&lt;ol>
&lt;li>Spin up new GCP VM. I won&amp;rsquo;t explain how to do that since it&amp;rsquo;s out of scope from our topic.&lt;/li>
&lt;li>Configure Redis 5.0.9 to meet minimum requirement as a node cluster. All configuration can be seen &lt;a href="https://redis.io/topics/cluster-tutorial">here&lt;/a>.
&lt;div class="collapsable-code">
&lt;input id="1" type="checkbox" />
&lt;label for="1">
&lt;span class="collapsable-code__language">conf&lt;/span>
&lt;span class="collapsable-code__title">redis.conf&lt;/span>
&lt;span class="collapsable-code__toggle" data-label-expand="△" data-label-collapse="▽">&lt;/span>
&lt;/label>
&lt;pre class="language-conf" >&lt;code>
cluster-node-timeout 100
cluster-enabled yes
cluster-config-file &amp;#34;auto-nodes.conf&amp;#34;
cluster-replica-validity-factor 1
cluster-require-full-coverage no
aof-use-rdb-preamble yes
&lt;/code>&lt;/pre>
&lt;/div>
&lt;/li>
&lt;li>Add the new node to the existing cluster as a slave. Wait for this new node to perform full sync with master. We have 3 node partitions, make sure this new node will join as a slave of corresponding master.
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">redis-cli --cluster add-node &amp;lt;new_redis_box_ip&amp;gt;:6379 &amp;lt;any_old_redis_box_ip&amp;gt;:6379 --cluster-slave --cluster-master-id &amp;lt;master_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Repeat step 1-3 for each partitions. The result, there&amp;rsquo;re 2 new slaves for each partition. Total nodes in cluster is 12, 6 old nodes, other 6 are new nodes.&lt;/li>
&lt;li>&lt;a href="https://redis.io/commands/cluster-failover">Failover&lt;/a> the old master and promote new node as a master for each partitions.
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">redis-cli -h &amp;lt;new_redis_box_ip&amp;gt; -p &lt;span style="color:#ae81ff">6379&lt;/span>
&lt;span style="color:#75715e"># run redis-cli command: CLUSTER FAILOVER&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Detach 6 old nodes from the cluster.
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">redis-cli --cluster del-node &amp;lt;new_redis_box_ip&amp;gt;:6379 &amp;lt;old_node_id&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="lesson-learned">Lesson Learned&lt;/h2>
&lt;p>When we do step 3, there&amp;rsquo;s a huge missing read request. After we seek for the root cause it happens because during full sync, ~5GB data transfer from master to new slave, the new slave will fill up the huge data to memory from disk. This activity leads to high CPU usage on our new slave node. Thus, some request that read data from this slave would not be proceeded.&lt;/p>
&lt;p>Before that, we also suspect it&amp;rsquo;s because of the fork process during RDB backup on the master. Redis cluster use RDB file to sync with the replica. And yup, fork process on Redis would consume huge CPU. But if this is the cause, it could be the issue for a long time ago, since the sync process between master and slave is always happening.&lt;/p>
&lt;p>Second suspect is &lt;a href="https://github.com/redis/redis/issues/4815">due to bandwidth limit&lt;/a>. During full sync process, master and slave will transfer the data as fast as possible so that the bandwidth is reach its limit. Hence, it will cause the request blocking. But, after we saw from our monitoring tool, we didn&amp;rsquo;t see any request error when master was transfering data to the new slave.&lt;/p>
&lt;p>The request was blocked when new slave fill up the new data. It happened so fast so that the CPU usage was 100%. Some requests that read from this new slave was failing. We still didn&amp;rsquo;t know and the inner process how the Redis fill up memory from zero. We also seek for a solution to hold the Redis read from specific slave, but we didn&amp;rsquo;t see any configuration to configure this. The close possible solution is &lt;code>cluster-allow-reads-when-down&lt;/code>, but it&amp;rsquo;s for redis 6.0. We didn&amp;rsquo;t have time to explore this deeper.&lt;/p>
&lt;p>Thus we planned to do this migration during off hour.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>We&amp;rsquo;re fail to do Redis cluster migration with zero downtime. But, we know for sure that this strategy is worked when data it not big. We performed the Redis cluster migration on integration, and we achieved zero error and zero downtime. Perhaps, if we can block the Redis read on the new slave, it might probably help when the new slave perform a full sync from master node.&lt;/p>
&lt;p>&lt;strong>References&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;a href="https://redis.io/topics/cluster-tutorial">https://redis.io/topics/cluster-tutorial&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://redis.io/commands/cluster-failover">https://redis.io/commands/cluster-failover&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/redis/redis/issues/4815">https://github.com/redis/redis/issues/4815&lt;/a>&lt;/li>
&lt;/ol></content></item><item><title>Slow Coding</title><link>https://dery.dev/posts/slow-coding/</link><pubDate>Fri, 09 Apr 2021 18:27:48 +0700</pubDate><guid>https://dery.dev/posts/slow-coding/</guid><description>I wrote this article for my own documentation related to lesson learned I was gathered during my coding-life. Really, up until now, coding is fun. The way we transfer our idea and logic into code so that computer can do whatever we want seems really magical. There&amp;rsquo;s a joke I&amp;rsquo;ve found somewhere (I forget exactly), today&amp;rsquo;s magician is programmer. It&amp;rsquo;s quite true, imagine the world which can do so much things, efficiently, automatically, and precisely without human inference.</description><content>&lt;p>I wrote this article for my own documentation related to lesson learned I was gathered during my coding-life. Really, up until now, coding is fun. The way we transfer our idea and logic into code so that computer can do whatever we want seems really magical. There&amp;rsquo;s a joke I&amp;rsquo;ve found somewhere (I forget exactly), today&amp;rsquo;s magician is programmer. It&amp;rsquo;s quite true, imagine the world which can do so much things, efficiently, automatically, and precisely without human inference. It can be done with computer.&lt;/p>
&lt;p>But the ugliest fact is that thing is dumb, computer can&amp;rsquo;t do anything meaningful unless someone instructs the machine to do something. How to instruct the computer? Through code. Code is just an alternate name of computer instruction which computer can understand. To code, or we can say coding, is quite similar with typing. The fun part, coding/typing is like a playing keyboard, it satisfies if we could type it fast. Expecially when you use mechanical keyboard :)&lt;/p>
&lt;hr>
&lt;p>On typing, we use natural language, we know english, indonesian, japanese, etc. On coding, we use programming language, we know golang, python, ruby, etc. To type/code we need to understand the language syntax, grammar, and meaning. Both translates conceptual abstraction into text. On typing, if we don&amp;rsquo;t know the concept idea / the topic / story, we can&amp;rsquo;t write the article, even we know fluently about the grammar and the words meaning. Same with coding, we&amp;rsquo;ll stuck and don&amp;rsquo;t know what to code if we didn&amp;rsquo;t know the bigger picture of the abstract system we want to build. It can tremendously slow down the coding process. To understand the bigger picture is to understand how to code effectively. I&amp;rsquo;ve ever experienced to not knowing bigger picture of the flow of the service our team owned, so I code blindly without knowing the side effect of my code.&lt;/p>
&lt;blockquote>
&lt;p>To understand the bigger picture is to understand how to code effectively&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>Another thing which is important to know it our dev environment. I used to be frequently use mouse on coding process. At the first time, it won&amp;rsquo;t bother me, up until I felt it&amp;rsquo;s so slow to move my hand from keyboard to trackpad / mousepad. So iteratively I built the dev environment (which still ongoing and continually improved forever) to support coding speed ability. In my current company, I usually use golang and ruby. I experimented with several IDE shortcuts to match with my finger, but nothing satisfies me. The keyboard shortcut is differ from IDE to another. And IDE can mostly slow down your computer. Hence I move to Vim. Really I like it. Now I&amp;rsquo;m the big fans of any terminal related tools. So, if anything can be done in terminal, I prefer to use it. It&amp;rsquo;s hard at the first time, but, eventually your finger can adapt, and it can speed up the process. The brain and the finger are merged. Later I will create my dev environment setup with minimal switching so everything can be done with keyboard.&lt;/p>
&lt;blockquote>
&lt;p>Tweak the dev environment to reduce keyboard-mouse switching time. And mastering the shortcut&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>We mostly spend our time in front of computer. So any ergonomic desk configuration needs to addressed. There&amp;rsquo;s a &lt;a href="https://www.youtube.com/watch?v=">youtube channel I recently watch related to ergonomic desk setup&lt;/a>. I personally create the room environment as minimalist as possible yet can support my body keep in normal position so any stressed can be reduced. Ergonomic is the key, I&amp;rsquo;ve ever use a chair which are not comfortable enough. The result, I can only spend a little amount of my productivity time. And never want to in front of computer screen again. Besides that, the exercise is also important. I personally trained myself discipline to take a 10 minutes yoga stretch in the morning, do abs sit up, and do 3 set of push up. In my free time, I also workout in gym. What we eat is also important to keep our brain keep active. Hence it can improve our understanding of the coding process. Finally it can improve the coding speed. I will create another article related to my desk minimalist setup, workout tips, and food meal I&amp;rsquo;ve prepared every day. We need to keep our body + brain healthy in order to boost the productivity.&lt;/p>
&lt;blockquote>
&lt;p>We need to keep our body + brain healthy in order to boost the productivity&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>That&amp;rsquo;s it. Now I&amp;rsquo;m going to continue read kindle, Sapiens: A Brief History of Humankind, by Yuval Noah Harari :). Happy coding, keep learning, stay humble, and eventually you will be able to bring a larger impact on society through code.&lt;/p></content></item></channel></rss>